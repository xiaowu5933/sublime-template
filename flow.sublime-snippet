<snippet>
  <content><![CDATA[
template<class Cap> struct max_flow {
public:
  max_flow() {}
  max_flow(int n) : _n(n), g(n) {}
  void add_edge(int from, int to, Cap cap) {
    assert(from >= 0 && from < _n);
    assert(to >= 0 && to < _n);
    assert(cap >= 0);
    int from_id = int(g[from].size());
    int to_id = int(g[to].size());
    if (from == to) {
      ++to_id;
    }
    pos.push_back({from, from_id});
    g[from].push_back({to, to_id, cap});
    g[to].push_back({from, from_id, 0});
  }
  Cap flow(int s, int t) {
    return flow(s, t, std::numeric_limits<Cap>::max());
  }
  Cap flow(int s, int t, Cap flow_limit) {
    assert(s >= 0 && s < _n);
    assert(t >= 0 && t < _n);
    assert(s != t);
    std::vector<int> dep(_n), iter(_n);
    auto bfs = [&]() -> bool {
      std::queue<int> que;
      que.push(s);
      std::fill(dep.begin(), dep.end(), -1);
      dep[s] = 0;
      while (que.size()) {
        int u = que.front();
        que.pop();
        for (auto& v : g[u]) {
          if (!v.cap || dep[v.to] != -1) {
            continue;
          }
          dep[v.to] = dep[u] + 1;
          if (v.to == t) {
            return true;
          }
          que.push(v.to);
        }
      }
      return false;
    };
    std::function<Cap(int, int)> dfs = [&](int u, Cap cap) {
      if (u == s) {
        return cap;
      }
      Cap res = 0;
      int _dep = dep[u];
      for (int& i = iter[u]; i < int(g[u].size()); ++i) {
        edge& e = g[u][i];
        if (_dep <= dep[e.to] || !g[e.to][e.rev].cap) {
          continue;
        }
        Cap d = dfs(e.to, std::min(cap - res, g[e.to][e.rev].cap));
        if (d <= 0) {
          continue;
        }
        g[u][i].cap += d;
        g[e.to][e.rev].cap -= d;
        res += d;
        if (res == cap) {
          return res;
        }
      }
      return res;
    };
    Cap flow = 0;
    while (flow < flow_limit) {
      if (!bfs()) {
        break;
      }
      std::fill(iter.begin(), iter.end(), 0);
      Cap d = dfs(t, flow_limit - flow);
      if (!d) {
        break;
      }
      flow += d;
    }
    return flow;
  }
  struct _edge {
    int from, to;
    Cap cap, flow;
  };
  _edge get_edge(int i) {
    int m = int(pos.size());
    assert(i >= 0 && i < m);
    edge _e = g[pos[i].first][pos[i].second];
    edge _re = g[_e.to][_e.rev];
    return _edge{pos[i].first, _e.to, _e.cap + _re.cap, _re.cap};
  }
  std::vector<_edge> edges() {
    std::vector<_edge> result;
    for (int i = 0; i < int(pos.size()); ++i) {
      result.push_back(get_edge(i));
    }
    return result;
  }
private:
  int _n;
  struct edge {
    int to, rev;
    Cap cap;
  };
  std::vector<std::pair<int, int>> pos;
  std::vector<std::vector<edge>> g;
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>flow</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.lua</scope>
</snippet>
