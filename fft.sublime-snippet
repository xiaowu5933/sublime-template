<snippet>
  <content><![CDATA[
using Complex = std::complex<double>;
using Poly = std::vector<Complex>;
void dft(Poly& a, int inv) {
  int n = (int) (a.size());
  if (n == 1) {
    return;
  }
  Poly b1(n / 2);
  Poly b2(n / 2);
  int m = n / 2;
  for (int i = 0; i < m; ++i) {
    b1[i] = a[2 * i];
    b2[i] = a[2 * i + 1];
  }
  dft(b1, inv);
  dft(b2, inv);
  for (int i = 0; i < m; ++i) {
    Complex w = Complex(std::cos(2.0 * std::acos(-1) * i / n), inv * std::sin(2.0 * std::acos(-1) * i / n));
    a[i] = b1[i] + w * b2[i];
    a[i + m] = b1[i] - w * b2[i];
  }
}
void fft(Poly& a, Poly b) {
  int n = a.size() + b.size();
  int r = 1;
  while (r < n) {
    r *= 2;
  }
  a.resize(r);
  b.resize(r);
  dft(a, 1);
  dft(b, 1);
  for (int i = 0; i < r; ++i) {
    a[i] *= b[i];
  }
  dft(a, -1);
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>fft</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.lua</scope>
</snippet>
