<snippet>
  <content><![CDATA[
struct lowest_common_ancestor {
public:
  lowest_common_ancestor() {}
  lowest_common_ancestor(int n) : _n(n), dep(n, 0), edges(n), up(n, std::vector<int>(LOG + 1)) {}
  void add_edge(int u, int v) {
    assert(u >= 0 && u < _n);
    assert(v >= 0 && v < _n);
    edges[u].push_back(v);
    edges[v].push_back(u);
  }
  void dfs(int u, int p) {
    for (int v : edges[u]) {
      if (v == p) {
        continue;
      }
      assert(!dep[v]);
      dep[v] = dep[u] + 1;
      up[v][0] = u;
      for (int j = 1; j <= LOG; ++j) {
        up[v][j] = up[up[v][j - 1]][j - 1];
      }
      dfs(v, u);
    }
  }
  int query(int u, int v) {
    assert(u >= 0 && u < _n);
    assert(v >= 0 && v < _n);
    if (dep[u] < dep[v]) {
      std::swap(u, v);
    }
    int diff = dep[u] - dep[v];
    for (int i = LOG; i >= 0; --i) {
      if (diff >> i & 1) {
        u = up[u][i];
      }
    }
    if (u == v) {
      return u;
    }
    for (int i = LOG; i >= 0; --i) {
      if (up[u][i] != up[v][i]) {
        u = up[u][i];
        v = up[v][i];
      }
    }
    return up[u][0];
  }
private:
  static const int LOG = 20;
  int _n;
  std::vector<int> dep;
  std::vector<std::vector<int>> edges, up;
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>lca</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.lua</scope>
</snippet>
