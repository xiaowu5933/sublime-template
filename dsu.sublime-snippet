<snippet>
  <content><![CDATA[
struct disjoint_set_union {
public:
  disjoint_set_union() {}
  disjoint_set_union(int n) : _n(n), parent_or_size(n, -1) {}
  bool merge(int a, int b) {
    assert(a >= 0 && a < _n);
    assert(b >= 0 && b < _n);
    int x = leader(a), y = leader(b);
    if (x == y) {
      return false;
    }
    if (-parent_or_size[x] < -parent_or_size[y]) {
      std::swap(x, y);
    }
    parent_or_size[x] += parent_or_size[y];
    parent_or_size[y] = x;
    return true;
  }
  bool same(int a, int b) {
    assert(a >= 0 && a < _n);
    assert(b >= 0 && b < _n);
    return leader(a) == leader(b);
  }
  int leader(int a) {
    assert(a >= 0 && a < _n);
    if (parent_or_size[a] < 0) {
      return a;
    }
    return parent_or_size[a] = leader(parent_or_size[a]);
  }
  int size(int a) {
    assert(a >= 0 && a < _n);
    return -parent_or_size[leader(a)];
  }
private:
  int _n;
  std::vector<int> parent_or_size;
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>dsu</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.lua</scope>
</snippet>
